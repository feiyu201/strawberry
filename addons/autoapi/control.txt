<?php
namespace app\api\controller;

use app\common\controller\Api;
use think\facade\Db;
use hg\apidoc\annotation as Apidoc;

/**
 * %s接口
 */

class %s extends Api
{

    //如果$noNeedLogin为空表示所有接口都需要登录才能请求
    //如果$noNeedRight为空表示所有接口都需要验证权限才能请求
    //如果接口已经设置无需登录,那也就无需鉴权了
    //
    // 无需登录的接口,*表示全部
    protected $noNeedLogin = ["*"];
    // 无需鉴权的接口,*表示全部
    protected $noNeedRight = ["*"];

    public function _initialize()
    {
        parent::_initialize();
    }

    /**
     * @Apidoc\Title("添加") 
     * @Apidoc\Author("草莓官方")
     * @Apidoc\Desc("描述信息")
     * @Apidoc\Method("POST,GET")
     * @Apidoc\Url("/api/%s/add")
     * @Apidoc\Header("token", type="string", require=true, desc="请求的Token")
     %s
     * @Apidoc\Returned   array data null 返回数据 successful
     * */
    public function add()
    {
        $param = request()->param();
        $model = new \app\common\model\%s();
        $result = $model->save($param);
        if ($result)
            $this->success('添加成功');
        else
            $this->error('添加失败');

    }

    /**
     * @Apidoc\Title("编辑")
     * @Apidoc\Author("草莓官方")
     * @Apidoc\Desc("描述信息")
     * @Apidoc\Method("POST,GET")
     * @Apidoc\Url("/api/%s/edit")
     * @Apidoc\Header("token", type="string", require=true, desc="请求的Token")
     %s
     * @Apidoc\Returned   array data null 返回数据 successful
     * */
    public function edit()
    {
        // $id = request()->param('id');
        $param = request()->param();
        $model = new \app\common\model\%s();
        $result = $model->update($param);
        if ($result)
            $this->success('编辑成功');
        else
            $this->error('编辑失败');

    }

    /**
     * @Apidoc\Title("查询单条")
     * @Apidoc\Author("草莓官方")
     * @Apidoc\Desc("描述信息")
     * @Apidoc\Method("POST,GET")
     * @Apidoc\Url("/api/%s/info")
     * @Apidoc\Header("token", type="string", require=true, desc="请求的Token")
     %s
     * @Apidoc\Returned   array data null 返回数据 successful
     * */
    public function info()
    {
        $id = request()->param('id');
        $result = Db::name('%s')->where('%s', $id)->find();
        %s
        if ($result)
            $this->success('查询成功', $result);
        else
            $this->error('信息不存在');

    }

    /**
     * @Apidoc\Title("查询列表") 
     * @Apidoc\Author("草莓官方")
     * @Apidoc\Desc("描述信息")
     * @Apidoc\Method("POST,GET")
     * @Apidoc\Url("/api/%s/_list")
     * @Apidoc\Header("token", type="string", require=true, desc="请求的Token")
     * @Apidoc\Param("page", type="int", require=false, desc="第几页")
     * @Apidoc\Param("limit", type="int", require=false, desc="显示条数")
     %s
     * @Apidoc\Returned   array data null 返回数据 successful
     * */
    public function _list()
    {
        $page = $this->request->param('page',1,'intval');
        $limit = $this->request->param('limit',10,'intval');
        %s
        $result = Db::name('%s')->where($where)->order('id','desc')->page($page,$limit)->select()->toArray();
        %s
        if ($result)
            $this->success('查询成功', $result);
        else
            $this->error('信息不存在');
    }

    /**
     * @Apidoc\Title("删除") 
     * @Apidoc\Author("草莓官方")
     * @Apidoc\Desc("描述信息")
     * @Apidoc\Method("POST,GET")
     * @Apidoc\Url("/api/%s/del")
     * @Apidoc\Header("token", type="string", require=true, desc="请求的Token")
     %s
     * @Apidoc\Returned   array data null 返回数据 successful
     * */
    public function del()
    {
        $id = request()->param('id');
        $result = Db::name('%s')->where('%s', $id)->delete();
        if ($result)
            $this->success('删除成功');
        else
            $this->error('删除失败');
    }

}